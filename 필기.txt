--기본 설정
react.min.js 파일안에는 컴포넌트 담당 react-dom-min.js 파일안에는 실제 돔에 렌더링하는 부분 담당

--class 
자바스크립트 class 안에서는 메소드만 만들 수 있다.
static 메소드는 객체생성전에도 사용가능

--JSX
컨테이너 element로 꼭 감싸줘야함
JSX안에서 자바스크립트 표현시에는 {}로 표현
JSX안에서 스타일 선언 시 - 사용 안됨 background-color -> backgroundColor 이렇게 표현
{/* ~ */} -> 주석 컨테이너 element 안에 주석 사용되야됨 

평상시 변수 선언 시 let 사용 
let은 한번 선언되면 다시 선언할 수 없음, 블록 유효범위

-- props
컴포넌트 내부의 immutable data -> 변하지 않는 데이터 처리 시 사용 
jsx 내부에 {this.props.propsName}
컴포넌트를 사용할 때, <> 안에 propsName="value"
this.props.children은 기본적으로 갖고있는 props로서, <Cpnt>여기에 있는 값이 들어간다.</Cpnt>

컴포넌트 선언이 끝난 후 props 
기본 값 설정 Component.defaultProps = {...}
타입 검증 Component.propTypes = {...}

--state
유동적인 데이터
JSX 내부에 {this.state.stateName}
초기값 설정이 필수, 생성자에서 this.state = {} 으로 설정
값을 수정 할 때에는 this.setState({..}), 렌더링 된 다음에 this.state= 절대 사용하지 말것

--컴포넌트 매핑 
arr.map(콜백함수,..~) 파라미터로 전달 된 함수를 통하여 배열 내의 각 요소를 처리해서 그 결과로 새로운 배열을 생성

--sort()
유니코드로 비교함 
숫자비교시 콜백함수 집어넣어줘야함 
기존배열 바꿈

function comparenumbers(a,b) {
  return a-b;
} //오름차순 

function comparenumbers(a,b) {
  return (a-b) * -1;
} // 내림차순
scores.sort(comparenumbers);


--filter() 
파라미터로 넘어온 함수에 만족되는 값만 정해서 새로운 배열 만듬


